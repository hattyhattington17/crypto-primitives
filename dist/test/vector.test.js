import { Field } from "o1js";
import { fieldToBinaryArray } from "../lib/util/Binary.js";
import { Vector } from "../lib/Vector.js";
describe("Vector", () => {
    it("should create a new vector with the given entries", () => {
        const entries = [1, 2, 3].map(e => Field(e));
        const vector = new Vector(entries);
        expect(vector.getLength()).toBe(3);
        expect(vector.getEntry(0)).toBe(Field(entries[0]));
        expect(vector.getEntry(1)).toBe(Field(entries[1]));
        expect(vector.getEntry(2)).toBe(Field(entries[2]));
    });
    describe("Reed-Solomon codes", () => {
        it("should compute Reed-Solomon code entries for the vector (1,2,3)", () => {
            const entries = [1, 2, 3].map(e => Field(e));
            const vector = new Vector(entries);
            // v = (1, 2, 3), n = 3
            // polynomial is P(x) = 1 * (x^2) + 2 * (x^1) + 3 * (x^0)
            expect(vector.computeReedSolomonCodeEntry(Field(0))).toBe(Field(0));
            expect(vector.computeReedSolomonCodeEntry(Field(1))).toBe(Field(6));
            expect(vector.computeReedSolomonCodeEntry(Field(2))).toBe(Field(11));
            expect(vector.computeReedSolomonCodeEntry(Field(3))).toBe(Field(18));
            expect(vector.computeReedSolomonCodeEntry(Field(4))).toBe(Field(27));
            expect(vector.computeReedSolomonCodeEntry(Field(5))).toBe(Field(38));
            expect(vector.computeReedSolomonCodeEntry(Field(50))).toBe(Field(2603));
        });
        it("should compute Reed-Solomon code entries for the vector (0, 10, 2, 9)", () => {
            const entries = [0, 10, 2, 9].map(e => Field(e));
            const vector = new Vector(entries);
            // v = (0, 10, 2, 9), n = 4
            // polynomial is P(x) = 0 * (x^3) + 10 * (x^3) + 2 * (x^1) + 9 * (x^0)
            expect(vector.computeReedSolomonCodeEntry(Field(0))).toBe(Field(0));
            expect(vector.computeReedSolomonCodeEntry(Field(1))).toBe(Field(21));
            expect(vector.computeReedSolomonCodeEntry(Field(2))).toBe(Field(93));
            expect(vector.computeReedSolomonCodeEntry(Field(3))).toBe(Field(285));
            expect(vector.computeReedSolomonCodeEntry(Field(30))).toBe(Field(270069));
        });
        it("should error on an empty vector", () => {
            const vector = new Vector([]);
            expect(vector.computeReedSolomonCodeEntry(Field(0))).toThrow("Empty vector");
        });
    });
    describe("Low-degree extension codes (univariate Lagrange interpolation", () => {
        // Compute Lagrange polynomials with https://www.dcode.fr/lagrange-interpolating-polynomial
        it("Should return the corresponding entry in the vector when called with an input between 0 and the vector length", () => {
            const vector1 = new Vector([1, 2, 3, 4, 5].map(e => Field(e)));
            expect(vector1.computeLowDegreeExtensionEntry(Field(0))).toBe(Field(1));
            expect(vector1.computeLowDegreeExtensionEntry(Field(1))).toBe(Field(2));
            expect(vector1.computeLowDegreeExtensionEntry(Field(2))).toBe(Field(3));
            expect(vector1.computeLowDegreeExtensionEntry(Field(3))).toBe(Field(4));
            expect(vector1.computeLowDegreeExtensionEntry(Field(4))).toBe(Field(5));
            expect(vector1.computeLowDegreeExtensionEntry(Field(50))).toBe(Field(51));
            const vector2 = new Vector([0, 10, 2, 9, 53, 55, 0, 2].map(e => Field(e)));
            expect(vector2.computeLowDegreeExtensionEntry(Field(0))).toBe(Field(0));
            expect(vector2.computeLowDegreeExtensionEntry(Field(1))).toBe(Field(10));
            expect(vector2.computeLowDegreeExtensionEntry(Field(2))).toBe(Field(2));
            expect(vector2.computeLowDegreeExtensionEntry(Field(3))).toBe(Field(9));
            expect(vector2.computeLowDegreeExtensionEntry(Field(4))).toBe(Field(53));
            expect(vector2.computeLowDegreeExtensionEntry(Field(5))).toBe(Field(55));
            expect(vector2.computeLowDegreeExtensionEntry(Field(6))).toBe(Field(0));
            expect(vector2.computeLowDegreeExtensionEntry(Field(7))).toBe(Field(2));
        });
        it("Should correctly evaluate the univariate lagrange polynomial when called with an input GTE the vector length", () => {
            const vector1 = new Vector([1, 2, 3, 4, 5].map(e => Field(e)));
            expect(vector1.computeLowDegreeExtensionEntry(Field(50))).toBe(Field(51));
            const vector2 = new Vector([0, 10, 2, 9, 53, 55, 0, 2].map(e => Field(e)));
            expect(vector2.computeLowDegreeExtensionEntry(Field(10))).toBe(Field("10618034425525"));
            expect(vector2.computeLowDegreeExtensionEntry(Field(1000))).toBe(Field("2005275450336906034000"));
        });
        it("should throw an error for an empty vector", () => {
            const vector = new Vector([]);
            expect(vector.computeLowDegreeExtensionEntry(Field(0))).toThrow("Empty vector");
        });
    });
    describe("Multilinear extension codes (multivariate Lagrange interpolation)", () => {
        it("should error on the wrong number of inputs", () => {
            // 10 entries requires ceil(log_2_10) inputs to encode all indices in binary
            const entries = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(e => Field(e));
            const vector = new Vector(entries);
            const inputs = new Vector([1].map(e => Field(e)));
            expect(vector.computeMultilinearExtensionEntry(inputs)).toThrow("Evaluation point vector must have length");
        });
        it("Should return correct vector entries for inputs in {0,1}^v corresponding to indices of vector entries", () => {
            const entries1 = [1, 2, 3, 4, 5].map(e => Field(e));
            const vector1 = new Vector(entries1);
            // 3 bits to represent indices 0-7 which
            // this is the lowest number of bits that can store the 5 entry vector
            const bits1 = Math.ceil(Math.log2(entries1.length));
            // returns entries in the original vector for binary encoded indices less than the vector length
            expect(vector1.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(0), bits1)))).toBe(Field(1));
            expect(vector1.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(1), bits1)))).toBe(Field(2));
            expect(vector1.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(2), bits1)))).toBe(Field(3));
            expect(vector1.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(3), bits1)))).toBe(Field(4));
            expect(vector1.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(4), bits1)))).toBe(Field(5));
            const entries2 = [0, 10, 2, 9, 53, 55, 0, 2, 0].map(e => Field(e));
            const vector2 = new Vector(entries2);
            // returns vector entries for input vectors v in {0,1}^v
            // 4 bits to represent indices 0-15, lowest number of bits that can represent all indices of a vector of length 9
            const bits2 = Math.ceil(Math.log2(entries2.length));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(0), bits2)))).toBe(Field(0));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(1), bits2)))).toBe(Field(10));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(2), bits2)))).toBe(Field(2));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(3), bits2)))).toBe(Field(9));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(4), bits2)))).toBe(Field(53));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(5), bits2)))).toBe(Field(55));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(6), bits2)))).toBe(Field(0));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(7), bits2)))).toBe(Field(2));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(8), bits2)))).toBe(Field(0));
        });
        it("Should return 0 for inputs in the {0,1}^v that do not correspond to a vector entry", () => {
            const entries1 = [1, 2, 3, 4, 5].map(e => Field(e));
            const vector1 = new Vector(entries1);
            const bits1 = Math.ceil(Math.log2(entries1.length));
            // returns 0 for binary encoded indices 5-7 which do not correspond to vector entries
            expect(vector1.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(5), bits1)))).toBe(Field(0));
            expect(vector1.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(6), bits1)))).toBe(Field(0));
            expect(vector1.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(7), bits1)))).toBe(Field(0));
            const entries2 = [0, 10, 2, 9, 53, 55, 0, 2, 0].map(e => Field(e));
            const vector2 = new Vector(entries2);
            // returns vector entries for input vectors v in {0,1}^v
            // 4 bits to represent indices 0-15, lowest number of bits that can represent all indices of a vector of length 9
            const bits2 = Math.ceil(Math.log2(entries2.length));
            // returns 0 for binary encoded indices 9-15 which do not correspond to vector entries
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(9), bits2)))).toBe(Field(0));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(10), bits2)))).toBe(Field(0));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(11), bits2)))).toBe(Field(0));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(12), bits2)))).toBe(Field(0));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(13), bits2)))).toBe(Field(0));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(14), bits2)))).toBe(Field(0));
            expect(vector2.computeMultilinearExtensionEntry(new Vector(fieldToBinaryArray(Field(15), bits2)))).toBe(Field(0));
        });
        it("Should return the correct multilinear extension for inputs in F^v", () => {
            // todo: find a tool to compute multilinear extensions for input vectors in F^v
            const entries1 = [1, 2, 3, 4, 5].map(e => Field(e));
            const vector1 = new Vector(entries1);
            const bits1 = Math.ceil(Math.log2(entries1.length));
            expect(vector1.computeMultilinearExtensionEntry(new Vector([ /*todo*/]))).toBe(Field(0));
            const entries2 = [0, 10, 2, 9, 53, 55, 0, 2, 0].map(e => Field(e));
            const vector2 = new Vector(entries2);
            const bits2 = Math.ceil(Math.log2(entries2.length));
            expect(vector1.computeMultilinearExtensionEntry(new Vector([ /*todo*/]))).toBe(Field(0));
        });
        it("should compute Multilinear Extension code entries for an empty vector", () => {
            const vector = new Vector([]);
            expect(vector.computeMultilinearExtensionEntry(new Vector([]))).toThrow("Empty vector");
        });
    });
});
//# sourceMappingURL=data:application/json;base64,